{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://extension_speedcontroller/./src/utils.js","webpack://extension_speedcontroller/./src/speedController.js","webpack://extension_speedcontroller/./src/screenshotController.js","webpack://extension_speedcontroller/./src/content.js"],"sourcesContent":["export function getVideo() {\n    return document.querySelector('.video-stream');\n}\n\nexport function showTooltip(button, message) {\n    const tooltip = document.createElement('div');\n    tooltip.classList.add('tooltip-text');\n    tooltip.textContent = message;\n    document.body.appendChild(tooltip);\n\n    const buttonRect = button.getBoundingClientRect();\n    tooltip.style.position = 'absolute';\n    tooltip.style.left = `${buttonRect.left + window.scrollX + (button.offsetWidth - tooltip.offsetWidth) / 2}px`;\n    tooltip.style.top = `${buttonRect.top + window.scrollY + button.offsetHeight + 5}px`;\n    tooltip.style.visibility = 'visible';\n\n    setTimeout(() => {\n        tooltip.remove();\n    }, 3000);\n}\n","import { getVideo } from './utils.js';\n\nclass SpeedController {\n    constructor(container) {\n        this.container = container;\n        this.video = null;\n        this.speeds = [];\n        this.init();\n    }\n\n    init() {\n        this.video = getVideo();\n        if (!this.video) {\n            // 動画要素が見つからない場合は待機\n            const observer = new MutationObserver((mutations, obs) => {\n                this.video = getVideo();\n                if (this.video) {\n                    this.applySavedPlaybackRate();\n                    obs.disconnect();\n                }\n            });\n            observer.observe(document.body, { childList: true, subtree: true });\n        } else {\n            this.applySavedPlaybackRate();\n        }\n        this.loadSpeeds();\n    }\n\n    loadSpeeds() {\n        chrome.storage.sync.get({ speedList: '1, 1.25, 1.5, 2' }, (data) => {\n            this.speeds = data.speedList.split(',').map(speed => parseFloat(speed.trim()));\n            this.speeds.forEach(speed => this.createButton(speed));\n        });\n    }\n\n    createButton(speed) {\n        const button = document.createElement('button');\n        button.textContent = `${speed}x`;\n        button.addEventListener('click', () => this.onSpeedButtonClick(speed));\n        this.container.appendChild(button);\n    }\n\n    onSpeedButtonClick(speed) {\n        if (!this.video) {\n            this.video = getVideo();\n        }\n        if (this.video) {\n            this.video.playbackRate = speed;\n            this.savePlaybackRate(speed);\n            this.updateButtonColors(speed);\n        }\n    }\n\n    savePlaybackRate(speed) {\n        chrome.storage.sync.set({ playbackRate: speed });\n    }\n\n    applySavedPlaybackRate() {\n        chrome.storage.sync.get(['playbackRate'], (result) => {\n            if (result.playbackRate && this.video) {\n                this.video.playbackRate = result.playbackRate;\n                this.updateButtonColors(result.playbackRate);\n            }\n        });\n    }\n\n    updateButtonColors(selectedSpeed) {\n        const buttons = this.container.querySelectorAll('button');\n        buttons.forEach(button => {\n            if (parseFloat(button.textContent) === selectedSpeed) {\n                button.classList.add('active');\n            } else {\n                button.classList.remove('active');\n            }\n        });\n    }\n}\n\nexport default SpeedController;\n","import { getVideo, showTooltip } from './utils.js';\n\nclass ScreenshotController {\n    constructor(button) {\n        this.button = button;\n        this.video = getVideo();\n        this.init();\n    }\n\n    init() {\n        this.button.addEventListener('click', () => this.takeScreenshot());\n    }\n\n    takeScreenshot() {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.width = this.video.videoWidth;\n        canvas.height = this.video.videoHeight;\n        ctx.drawImage(this.video, 0, 0, canvas.width, canvas.height);\n        canvas.toBlob(blob => this.copyToClipboard(blob), 'image/png');\n    }\n\n    copyToClipboard(blob) {\n        const item = new ClipboardItem({ \"image/png\": blob });\n        navigator.clipboard.write([item])\n            .then(() => showTooltip(this.button, 'スクリーンショットをコピーしました。'))\n            .catch(() => showTooltip(this.button, 'コピーに失敗しました。'));\n    }\n}\n\nexport default ScreenshotController;\n","import SpeedController from './speedController.js';\nimport ScreenshotController from './screenshotController.js';\n\nconsole.log('content.js loaded');\n\nfunction createAllContainer() {\n    const allContainer = document.createElement('div');\n    allContainer.id = 'AllContainer';\n\n    // 再生速度ボタン\n    const speedContainer = document.createElement('div');\n    speedContainer.id = 'speedContainer';\n    allContainer.appendChild(speedContainer);\n    new SpeedController(speedContainer);\n\n    // スクリーンショットボタン\n    const screenshotButton = document.createElement('button');\n    screenshotButton.id = 'screenshotButton';\n    screenshotButton.textContent = '📷';\n    allContainer.appendChild(screenshotButton);\n    new ScreenshotController(screenshotButton);\n\n    // その他のボタンも同様にクラスとして分割\n\n    return allContainer;\n}\n\nfunction insertAfterClarifyBox() {\n    const observer = new MutationObserver((mutations, obs) => {\n        const targetElement = document.getElementById('clarify-box');\n        if (targetElement) {\n            const allContainer = createAllContainer();\n            targetElement.parentNode.insertBefore(allContainer, targetElement.nextSibling);\n            obs.disconnect();\n        }\n    });\n\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n    });\n}\n\ninsertAfterClarifyBox();\n"],"names":["getVideo","document","querySelector","showTooltip","button","message","tooltip","createElement","classList","add","textContent","body","appendChild","buttonRect","getBoundingClientRect","style","position","left","window","scrollX","offsetWidth","top","scrollY","offsetHeight","visibility","setTimeout","remove","constructor","container","this","video","speeds","init","applySavedPlaybackRate","MutationObserver","mutations","obs","disconnect","observe","childList","subtree","loadSpeeds","chrome","storage","sync","get","speedList","data","split","map","speed","parseFloat","trim","forEach","createButton","addEventListener","onSpeedButtonClick","playbackRate","savePlaybackRate","updateButtonColors","set","result","selectedSpeed","querySelectorAll","takeScreenshot","canvas","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","toBlob","blob","copyToClipboard","item","ClipboardItem","navigator","clipboard","write","then","catch","console","log","targetElement","getElementById","allContainer","id","speedContainer","screenshotButton","createAllContainer","parentNode","insertBefore","nextSibling"],"sourceRoot":""}