{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://extension_speedcontroller/./src/utils.js","webpack://extension_speedcontroller/./src/speedController.js","webpack://extension_speedcontroller/./src/screenshotController.js","webpack://extension_speedcontroller/./src/content.js"],"sourcesContent":["export function getVideo() {\n    return document.querySelector('.video-stream');\n}\n\nexport function showTooltip(button, message) {\n    const tooltip = document.createElement('div');\n    tooltip.classList.add('tooltip-text');\n    tooltip.textContent = message;\n    document.body.appendChild(tooltip);\n\n    const buttonRect = button.getBoundingClientRect();\n    tooltip.style.position = 'absolute';\n    tooltip.style.left = `${buttonRect.left + window.scrollX + (button.offsetWidth - tooltip.offsetWidth) / 2}px`;\n    tooltip.style.top = `${buttonRect.top + window.scrollY + button.offsetHeight + 5}px`;\n    tooltip.style.visibility = 'visible';\n\n    setTimeout(() => {\n        tooltip.remove();\n    }, 3000);\n}\n","// speedController.js\n\nimport { getVideo } from './utils.js';\n\nclass SpeedController {\n    constructor(container) {\n        this.container = container;\n        this.video = null;\n        this.speeds = [];\n        this.init();\n    }\n\n    init() {\n        this.loadSpeeds();\n        this.setupVideoObserver();\n    }\n\n    loadSpeeds() {\n        chrome.storage.sync.get({ speedList: '1, 1.25, 1.5, 2' }, (data) => {\n            this.speeds = data.speedList.split(',').map(speed => parseFloat(speed.trim()));\n            this.speeds.forEach(speed => this.createButton(speed));\n        });\n    }\n\n    createButton(speed) {\n        const button = document.createElement('button');\n        button.textContent = `${speed}x`;\n        button.addEventListener('click', () => this.onSpeedButtonClick(speed));\n        this.container.appendChild(button);\n    }\n\n    onSpeedButtonClick(speed) {\n        if (this.video) {\n            this.video.playbackRate = speed;\n            this.savePlaybackRate(speed);\n            this.updateButtonColors(speed);\n        }\n    }\n\n    savePlaybackRate(speed) {\n        chrome.storage.sync.set({ playbackRate: speed });\n    }\n\n    applySavedPlaybackRate() {\n        chrome.storage.sync.get(['playbackRate'], (result) => {\n            if (result.playbackRate && this.video) {\n                this.video.playbackRate = result.playbackRate;\n                this.updateButtonColors(result.playbackRate);\n            }\n        });\n    }\n\n    updateButtonColors(selectedSpeed) {\n        const buttons = this.container.querySelectorAll('button');\n        buttons.forEach(button => {\n            if (parseFloat(button.textContent) === selectedSpeed) {\n                button.classList.add('active');\n            } else {\n                button.classList.remove('active');\n            }\n        });\n    }\n\n    setupVideoObserver() {\n        // 最初の動画要素を取得\n        this.video = getVideo();\n\n        // 動画が存在しない場合、DOMの変化を監視\n        if (!this.video) {\n            const bodyObserver = new MutationObserver((mutations, obs) => {\n                this.video = getVideo();\n                if (this.video) {\n                    this.addVideoEventListeners();\n                    obs.disconnect();\n                }\n            });\n            bodyObserver.observe(document.body, { childList: true, subtree: true });\n        } else {\n            this.addVideoEventListeners();\n        }\n\n        // 動画要素の置き換えを監視\n        const videoParent = document.querySelector('.html5-video-player');\n        if (videoParent) {\n            const videoObserver = new MutationObserver(() => {\n                const newVideo = getVideo();\n                if (newVideo && newVideo !== this.video) {\n                    this.video = newVideo;\n                    this.addVideoEventListeners();\n                }\n            });\n            videoObserver.observe(videoParent, { childList: true, subtree: true });\n        }\n    }\n\n    addVideoEventListeners() {\n        if (this.video) {\n            // 動画のメタデータがロードされたときに再生速度を適用\n            this.video.addEventListener('loadedmetadata', () => this.applySavedPlaybackRate());\n            // ページ読み込み時にも再生速度を適用\n            this.applySavedPlaybackRate();\n        }\n    }\n}\n\nexport default SpeedController;\n","import { getVideo, showTooltip } from './utils.js';\n\nclass ScreenshotController {\n    constructor(button) {\n        this.button = button;\n        this.video = getVideo();\n        this.init();\n    }\n\n    init() {\n        this.button.addEventListener('click', () => this.takeScreenshot());\n    }\n\n    takeScreenshot() {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.width = this.video.videoWidth;\n        canvas.height = this.video.videoHeight;\n        ctx.drawImage(this.video, 0, 0, canvas.width, canvas.height);\n        canvas.toBlob(blob => this.copyToClipboard(blob), 'image/png');\n    }\n\n    copyToClipboard(blob) {\n        const item = new ClipboardItem({ \"image/png\": blob });\n        navigator.clipboard.write([item])\n            .then(() => showTooltip(this.button, 'スクリーンショットをコピーしました。'))\n            .catch(() => showTooltip(this.button, 'コピーに失敗しました。'));\n    }\n}\n\nexport default ScreenshotController;\n","import SpeedController from './speedController.js';\nimport ScreenshotController from './screenshotController.js';\n\nfunction createAllContainer() {\n    const allContainer = document.createElement('div');\n    allContainer.id = 'AllContainer';\n\n    // スクリーンショットボタン\n    const screenshotButton = document.createElement('button');\n    screenshotButton.id = 'screenshotButton';\n    screenshotButton.textContent = '📷';\n    allContainer.appendChild(screenshotButton);\n    new ScreenshotController(screenshotButton);\n\n    // 再生速度ボタン\n    const speedContainer = document.createElement('div');\n    speedContainer.id = 'speedContainer';\n    allContainer.appendChild(speedContainer);\n    new SpeedController(speedContainer);\n\n    return allContainer;\n}\n\nfunction insertAfterClarifyBox() {\n    const observer = new MutationObserver((mutations, obs) => {\n        const targetElement = document.getElementById('clarify-box');\n        if (targetElement) {\n            const allContainer = createAllContainer();\n            targetElement.parentNode.insertBefore(allContainer, targetElement.nextSibling);\n            obs.disconnect();\n        }\n    });\n\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n    });\n}\n\ninsertAfterClarifyBox();\n"],"names":["getVideo","document","querySelector","showTooltip","button","message","tooltip","createElement","classList","add","textContent","body","appendChild","buttonRect","getBoundingClientRect","style","position","left","window","scrollX","offsetWidth","top","scrollY","offsetHeight","visibility","setTimeout","remove","constructor","container","this","video","speeds","init","loadSpeeds","setupVideoObserver","chrome","storage","sync","get","speedList","data","split","map","speed","parseFloat","trim","forEach","createButton","addEventListener","onSpeedButtonClick","playbackRate","savePlaybackRate","updateButtonColors","set","applySavedPlaybackRate","result","selectedSpeed","querySelectorAll","addVideoEventListeners","MutationObserver","mutations","obs","disconnect","observe","childList","subtree","videoParent","newVideo","takeScreenshot","canvas","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","toBlob","blob","copyToClipboard","item","ClipboardItem","navigator","clipboard","write","then","catch","targetElement","getElementById","allContainer","id","screenshotButton","speedContainer","createAllContainer","parentNode","insertBefore","nextSibling"],"sourceRoot":""}